/**
 * QB dispatcher rest interface
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Datalist } from '../model/datalist';
import { OfferingData } from '../model/offeringData';
import { Offers } from '../model/offers';
import { PaymentData } from '../model/paymentData';
import { Policy } from '../model/policy';
import { PolicyPremium } from '../model/policyPremium';
import { PolicyProcessTransition } from '../model/policyProcessTransition';
import { PolicyProductConfig } from '../model/policyProductConfig';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PolicyService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * tbd...
     * 
     * @param body 
     * @param body2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllPolicies(body?: string, body2?: string, observe?: 'body', reportProgress?: boolean): Observable<Policy>;
    public getAllPolicies(body?: string, body2?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Policy>>;
    public getAllPolicies(body?: string, body2?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Policy>>;
    public getAllPolicies(body?: string, body2?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.get<Policy>(`${this.basePath}/policy/policies`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param policyId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getInstallmentType(contractId: string, policyId: string, observe?: 'body', reportProgress?: boolean): Observable<Datalist>;
    public getInstallmentType(contractId: string, policyId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Datalist>>;
    public getInstallmentType(contractId: string, policyId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Datalist>>;
    public getInstallmentType(contractId: string, policyId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling getInstallmentType.');
        }
        if (policyId === null || policyId === undefined) {
            throw new Error('Required parameter policyId was null or undefined when calling getInstallmentType.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Datalist>(`${this.basePath}/policy/contracts/${encodeURIComponent(String(contractId))}/policies/${encodeURIComponent(String(policyId))}/installmenttype`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getIssuedPolicyPremium(contractId: string, observe?: 'body', reportProgress?: boolean): Observable<OfferingData>;
    public getIssuedPolicyPremium(contractId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OfferingData>>;
    public getIssuedPolicyPremium(contractId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OfferingData>>;
    public getIssuedPolicyPremium(contractId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling getIssuedPolicyPremium.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<OfferingData>(`${this.basePath}/policy/contracts/${encodeURIComponent(String(contractId))}/issuedpolicypremium`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param body 
     * @param body2 
     * @param body3 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOfferings(body?: string, body2?: string, body3?: string, observe?: 'body', reportProgress?: boolean): Observable<Offers>;
    public getOfferings(body?: string, body2?: string, body3?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Offers>>;
    public getOfferings(body?: string, body2?: string, body3?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Offers>>;
    public getOfferings(body?: string, body2?: string, body3?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.get<Offers>(`${this.basePath}/policy`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param policyId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPaymentData(contractId: string, policyId: string, observe?: 'body', reportProgress?: boolean): Observable<PaymentData>;
    public getPaymentData(contractId: string, policyId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaymentData>>;
    public getPaymentData(contractId: string, policyId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaymentData>>;
    public getPaymentData(contractId: string, policyId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling getPaymentData.');
        }
        if (policyId === null || policyId === undefined) {
            throw new Error('Required parameter policyId was null or undefined when calling getPaymentData.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<PaymentData>(`${this.basePath}/policy/contracts/${encodeURIComponent(String(contractId))}/policies/${encodeURIComponent(String(policyId))}/paymentdata`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param policyId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPaymentTypes(contractId: string, policyId: string, observe?: 'body', reportProgress?: boolean): Observable<Datalist>;
    public getPaymentTypes(contractId: string, policyId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Datalist>>;
    public getPaymentTypes(contractId: string, policyId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Datalist>>;
    public getPaymentTypes(contractId: string, policyId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling getPaymentTypes.');
        }
        if (policyId === null || policyId === undefined) {
            throw new Error('Required parameter policyId was null or undefined when calling getPaymentTypes.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Datalist>(`${this.basePath}/policy/contracts/${encodeURIComponent(String(contractId))}/policies/${encodeURIComponent(String(policyId))}/paymenttype`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param policyId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPolicyAndPremiumData(contractId: string, policyId: string, observe?: 'body', reportProgress?: boolean): Observable<OfferingData>;
    public getPolicyAndPremiumData(contractId: string, policyId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OfferingData>>;
    public getPolicyAndPremiumData(contractId: string, policyId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OfferingData>>;
    public getPolicyAndPremiumData(contractId: string, policyId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling getPolicyAndPremiumData.');
        }
        if (policyId === null || policyId === undefined) {
            throw new Error('Required parameter policyId was null or undefined when calling getPolicyAndPremiumData.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<OfferingData>(`${this.basePath}/policy/contracts/${encodeURIComponent(String(contractId))}/policies/${encodeURIComponent(String(policyId))}/policyandpremium`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param policyId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPolicyPremium(contractId: string, policyId: string, observe?: 'body', reportProgress?: boolean): Observable<PolicyPremium>;
    public getPolicyPremium(contractId: string, policyId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PolicyPremium>>;
    public getPolicyPremium(contractId: string, policyId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PolicyPremium>>;
    public getPolicyPremium(contractId: string, policyId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling getPolicyPremium.');
        }
        if (policyId === null || policyId === undefined) {
            throw new Error('Required parameter policyId was null or undefined when calling getPolicyPremium.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<PolicyPremium>(`${this.basePath}/policy/contracts/${encodeURIComponent(String(contractId))}/policies/${encodeURIComponent(String(policyId))}/premium`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProductComponents(observe?: 'body', reportProgress?: boolean): Observable<Array<any>>;
    public getProductComponents(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<any>>>;
    public getProductComponents(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<any>>>;
    public getProductComponents(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<any>>(`${this.basePath}/policy/mainclasslist/classproducts/productcomponents`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param policyId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUpsellOffer(contractId: string, policyId: string, observe?: 'body', reportProgress?: boolean): Observable<PolicyProductConfig>;
    public getUpsellOffer(contractId: string, policyId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PolicyProductConfig>>;
    public getUpsellOffer(contractId: string, policyId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PolicyProductConfig>>;
    public getUpsellOffer(contractId: string, policyId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling getUpsellOffer.');
        }
        if (policyId === null || policyId === undefined) {
            throw new Error('Required parameter policyId was null or undefined when calling getUpsellOffer.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<PolicyProductConfig>(`${this.basePath}/policy/contracts/${encodeURIComponent(String(contractId))}/policies/${encodeURIComponent(String(policyId))}/upselloffer`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param policyId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postIssuePolicyProcessTransition(policyId: string, observe?: 'body', reportProgress?: boolean): Observable<PolicyProcessTransition>;
    public postIssuePolicyProcessTransition(policyId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PolicyProcessTransition>>;
    public postIssuePolicyProcessTransition(policyId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PolicyProcessTransition>>;
    public postIssuePolicyProcessTransition(policyId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (policyId === null || policyId === undefined) {
            throw new Error('Required parameter policyId was null or undefined when calling postIssuePolicyProcessTransition.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<PolicyProcessTransition>(`${this.basePath}/policy/businessacceptance/processtransition/issuepolicy/${encodeURIComponent(String(policyId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param policyId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postSelectPolicyProcessTransition(policyId: string, observe?: 'body', reportProgress?: boolean): Observable<PolicyProcessTransition>;
    public postSelectPolicyProcessTransition(policyId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PolicyProcessTransition>>;
    public postSelectPolicyProcessTransition(policyId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PolicyProcessTransition>>;
    public postSelectPolicyProcessTransition(policyId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (policyId === null || policyId === undefined) {
            throw new Error('Required parameter policyId was null or undefined when calling postSelectPolicyProcessTransition.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<PolicyProcessTransition>(`${this.basePath}/policy/businessacceptance/processtransition/selectpolicy/${encodeURIComponent(String(policyId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param policyId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updatePaymentData(contractId: string, policyId: string, body?: PaymentData, observe?: 'body', reportProgress?: boolean): Observable<PaymentData>;
    public updatePaymentData(contractId: string, policyId: string, body?: PaymentData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaymentData>>;
    public updatePaymentData(contractId: string, policyId: string, body?: PaymentData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaymentData>>;
    public updatePaymentData(contractId: string, policyId: string, body?: PaymentData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling updatePaymentData.');
        }
        if (policyId === null || policyId === undefined) {
            throw new Error('Required parameter policyId was null or undefined when calling updatePaymentData.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<PaymentData>(`${this.basePath}/policy/contracts/${encodeURIComponent(String(contractId))}/policies/${encodeURIComponent(String(policyId))}/paymentdata`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param policyId 
     * @param body 
     * @param body2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public upsellAndUpdatePolicy(contractId: string, policyId: string, body?: string, body2?: PolicyProductConfig, observe?: 'body', reportProgress?: boolean): Observable<PolicyProductConfig>;
    public upsellAndUpdatePolicy(contractId: string, policyId: string, body?: string, body2?: PolicyProductConfig, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PolicyProductConfig>>;
    public upsellAndUpdatePolicy(contractId: string, policyId: string, body?: string, body2?: PolicyProductConfig, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PolicyProductConfig>>;
    public upsellAndUpdatePolicy(contractId: string, policyId: string, body?: string, body2?: PolicyProductConfig, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling upsellAndUpdatePolicy.');
        }
        if (policyId === null || policyId === undefined) {
            throw new Error('Required parameter policyId was null or undefined when calling upsellAndUpdatePolicy.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<PolicyProductConfig>(`${this.basePath}/policy/contracts/${encodeURIComponent(String(contractId))}/policies/${encodeURIComponent(String(policyId))}`,
            body2,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
