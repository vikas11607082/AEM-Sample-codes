/**
 * QB dispatcher rest interface
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Datalist } from '../model/datalist';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DomainService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * tbd...
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public brands(observe?: 'body', reportProgress?: boolean): Observable<Array<any>>;
    public brands(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<any>>>;
    public brands(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<any>>>;
    public brands(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<any>>(`${this.basePath}/domain/vehicle-brands`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDataList(body?: string, observe?: 'body', reportProgress?: boolean): Observable<Datalist>;
    public getDataList(body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Datalist>>;
    public getDataList(body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Datalist>>;
    public getDataList(body?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.get<Datalist>(`${this.basePath}/domain/datalist`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param body 
     * @param body2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSuggestedBankAddressList(body?: string, body2?: string, observe?: 'body', reportProgress?: boolean): Observable<Datalist>;
    public getSuggestedBankAddressList(body?: string, body2?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Datalist>>;
    public getSuggestedBankAddressList(body?: string, body2?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Datalist>>;
    public getSuggestedBankAddressList(body?: string, body2?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.get<Datalist>(`${this.basePath}/domain/bankaddress`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSuggestedBankBranchList(body?: string, observe?: 'body', reportProgress?: boolean): Observable<Datalist>;
    public getSuggestedBankBranchList(body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Datalist>>;
    public getSuggestedBankBranchList(body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Datalist>>;
    public getSuggestedBankBranchList(body?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.get<Datalist>(`${this.basePath}/domain/bankbranch`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param body 
     * @param body2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSuggestedBankNames(body?: string, body2?: string, observe?: 'body', reportProgress?: boolean): Observable<Datalist>;
    public getSuggestedBankNames(body?: string, body2?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Datalist>>;
    public getSuggestedBankNames(body?: string, body2?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Datalist>>;
    public getSuggestedBankNames(body?: string, body2?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.get<Datalist>(`${this.basePath}/domain/banknames`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSuggestedBankTownsList(body?: string, observe?: 'body', reportProgress?: boolean): Observable<Datalist>;
    public getSuggestedBankTownsList(body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Datalist>>;
    public getSuggestedBankTownsList(body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Datalist>>;
    public getSuggestedBankTownsList(body?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.get<Datalist>(`${this.basePath}/domain/banktowns`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSuggestedStreetList(body?: string, observe?: 'body', reportProgress?: boolean): Observable<Datalist>;
    public getSuggestedStreetList(body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Datalist>>;
    public getSuggestedStreetList(body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Datalist>>;
    public getSuggestedStreetList(body?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.get<Datalist>(`${this.basePath}/domain/streets`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSuggestedTownList(body?: string, observe?: 'body', reportProgress?: boolean): Observable<Datalist>;
    public getSuggestedTownList(body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Datalist>>;
    public getSuggestedTownList(body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Datalist>>;
    public getSuggestedTownList(body?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.get<Datalist>(`${this.basePath}/domain/towns`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSuggestedZipCodeList(body?: string, observe?: 'body', reportProgress?: boolean): Observable<Datalist>;
    public getSuggestedZipCodeList(body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Datalist>>;
    public getSuggestedZipCodeList(body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Datalist>>;
    public getSuggestedZipCodeList(body?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.get<Datalist>(`${this.basePath}/domain/zipcodes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param body 
     * @param body2 
     * @param body3 
     * @param body4 
     * @param body5 
     * @param body6 
     * @param body7 
     * @param body8 
     * @param body9 
     * @param body10 
     * @param body11 
     * @param body12 
     * @param body13 
     * @param body14 
     * @param body15 
     * @param body16 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVehicleCharacteristics(body?: string, body2?: string, body3?: string, body4?: string, body5?: string, body6?: string, body7?: string, body8?: number, body9?: string, body10?: string, body11?: string, body12?: string, body13?: string, body14?: string, body15?: string, body16?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<any>>;
    public getVehicleCharacteristics(body?: string, body2?: string, body3?: string, body4?: string, body5?: string, body6?: string, body7?: string, body8?: number, body9?: string, body10?: string, body11?: string, body12?: string, body13?: string, body14?: string, body15?: string, body16?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<any>>>;
    public getVehicleCharacteristics(body?: string, body2?: string, body3?: string, body4?: string, body5?: string, body6?: string, body7?: string, body8?: number, body9?: string, body10?: string, body11?: string, body12?: string, body13?: string, body14?: string, body15?: string, body16?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<any>>>;
    public getVehicleCharacteristics(body?: string, body2?: string, body3?: string, body4?: string, body5?: string, body6?: string, body7?: string, body8?: number, body9?: string, body10?: string, body11?: string, body12?: string, body13?: string, body14?: string, body15?: string, body16?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.get<Array<any>>(`${this.basePath}/domain/vehiclecharacteristics`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param body 
     * @param body2 
     * @param body3 
     * @param body4 
     * @param body5 
     * @param body6 
     * @param body7 
     * @param body8 
     * @param body9 
     * @param body10 
     * @param body11 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVehicleDetails(body?: string, body2?: string, body3?: string, body4?: string, body5?: string, body6?: string, body7?: string, body8?: string, body9?: string, body10?: string, body11?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<any>>;
    public getVehicleDetails(body?: string, body2?: string, body3?: string, body4?: string, body5?: string, body6?: string, body7?: string, body8?: string, body9?: string, body10?: string, body11?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<any>>>;
    public getVehicleDetails(body?: string, body2?: string, body3?: string, body4?: string, body5?: string, body6?: string, body7?: string, body8?: string, body9?: string, body10?: string, body11?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<any>>>;
    public getVehicleDetails(body?: string, body2?: string, body3?: string, body4?: string, body5?: string, body6?: string, body7?: string, body8?: string, body9?: string, body10?: string, body11?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.get<Array<any>>(`${this.basePath}/domain/vehicledetails`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
