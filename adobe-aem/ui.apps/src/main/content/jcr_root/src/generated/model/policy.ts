/**
 * QB dispatcher rest interface
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Amendment } from './amendment';
import { CommissionAssignee } from './commissionAssignee';
import { Coverage } from './coverage';
import { CoverageCluster } from './coverageCluster';
import { CoverageSelectionGroup } from './coverageSelectionGroup';
import { Discount } from './discount';
import { ExtensionPolicy } from './extensionPolicy';
import { HALEmbeddedElements } from './hALEmbeddedElements';
import { HALLinks } from './hALLinks';
import { Interval } from './interval';
import { LinkAccountManager } from './linkAccountManager';
import { LinkContactChannel } from './linkContactChannel';
import { LinkMainClass } from './linkMainClass';
import { LinkPartyObject } from './linkPartyObject';
import { LinkPaymentData } from './linkPaymentData';
import { LinkPolicy } from './linkPolicy';
import { LinkScheduledTask } from './linkScheduledTask';
import { MetaInfoList } from './metaInfoList';
import { Money } from './money';
import { MonthDay } from './monthDay';
import { PolicyAddon } from './policyAddon';
import { ProcessSlip } from './processSlip';
import { Reduction } from './reduction';
import { SalesCampaign } from './salesCampaign';
import { Selection } from './selection';
import { TariffModulation } from './tariffModulation';


export interface Policy {
    language?: string;
    comment?: string;
    mainClass?: LinkMainClass;
    currency?: string;
    source?: string;
    status?: string;
    phase?: string;
    externalPolicyNumber?: string;
    channelpresale?: LinkContactChannel;
    channelpostsale?: LinkContactChannel;
    paymentDataLink?: LinkPaymentData;
    paymentFrequency?: string;
    insuranceCompany?: string;
    accountManagers?: Array<CommissionAssignee>;
    contractInterval?: Interval;
    coverageGroups?: Array<CoverageSelectionGroup>;
    lastOwnershipChangeDate?: string;
    pendingActions?: Array<string>;
    originalContractPolicy?: LinkPolicy;
    insuredParties?: Array<LinkPartyObject>;
    deliverWithAttachments?: boolean;
    recurringRenewalDate?: MonthDay;
    subsequentPremium?: Money;
    offeringSortingNumber?: number;
    productOfferingName?: string;
    productOfferingCategory?: string;
    mainClassProductSign?: string;
    dunningStartDate?: string;
    coverageClusters?: Array<CoverageCluster>;
    individualPolicyName?: string;
    dunningStopDate?: string;
    policyCustomName?: string;
    legacySystemName?: string;
    legacyPolicyNumber?: string;
    previousInsurer?: string;
    dateOfCreation?: string;
    policyType?: string;
    policyNumber?: string;
    purchaseDate?: string;
    bundleId?: string;
    coverages?: Array<Coverage>;
    channelsale?: LinkContactChannel;
    inceptionDate?: string;
    stadium?: Policy.StadiumEnum;
    salesChannel?: string;
    selection?: Selection;
    reductions?: Array<Reduction>;
    amendments?: Array<Amendment>;
    scheduledTask?: LinkScheduledTask;
    partyInCharge?: Policy.PartyInChargeEnum;
    mainClassList?: Array<LinkMainClass>;
    digitalPolicy?: boolean;
    discount?: Discount;
    modulations?: Array<TariffModulation>;
    processSlips?: Array<ProcessSlip>;
    campaign?: SalesCampaign;
    addressee?: LinkPartyObject;
    payer?: LinkPartyObject;
    tariffType?: string;
    firstPremium?: Money;
    policyHolder?: LinkPartyObject;
    isFromLoan?: boolean;
    policyBalance?: Money;
    agent?: LinkAccountManager;
    accountStatus?: string;
    branchName?: string;
    branchId?: string;
    agentNumber?: string;
    fleetNumber?: string;
    policyAddon?: PolicyAddon;
    self?: LinkPolicy;
    getLinks?: HALLinks;
    getEmbedded?: HALEmbeddedElements;
    getMeta?: MetaInfoList;
    extEntity?: ExtensionPolicy;
}
export namespace Policy {
    export type StadiumEnum = 'QUOTATION' | 'APPLICATION' | 'CONTRACT';
    export const StadiumEnum = {
        QUOTATION: 'QUOTATION' as StadiumEnum,
        APPLICATION: 'APPLICATION' as StadiumEnum,
        CONTRACT: 'CONTRACT' as StadiumEnum
    }
    export type PartyInChargeEnum = '_UNSPECIFIED_' | 'INSURANCECOMPANY' | 'POLICYHOLDER';
    export const PartyInChargeEnum = {
        UNSPECIFIED: '_UNSPECIFIED_' as PartyInChargeEnum,
        INSURANCECOMPANY: 'INSURANCECOMPANY' as PartyInChargeEnum,
        POLICYHOLDER: 'POLICYHOLDER' as PartyInChargeEnum
    }
}
