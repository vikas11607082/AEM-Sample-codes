/**
 * QB dispatcher rest interface
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Address } from '../model/address';
import { AddressModel } from '../model/addressModel';
import { CarOwner } from '../model/carOwner';
import { ContactChannel } from '../model/contactChannel';
import { Driver } from '../model/driver';
import { Party } from '../model/party';
import { PartyData } from '../model/partyData';
import { PartyRole } from '../model/partyRole';
import { Property } from '../model/property';
import { ServiceProvider } from '../model/serviceProvider';
import { VehicleProperty } from '../model/vehicleProperty';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CustomerService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * tbd...
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createContract(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public createContract(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public createContract(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public createContract(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<string>(`${this.basePath}/customer/contracts`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createProperty(contractId: string, body?: VehicleProperty, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public createProperty(contractId: string, body?: VehicleProperty, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public createProperty(contractId: string, body?: VehicleProperty, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public createProperty(contractId: string, body?: VehicleProperty, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling createProperty.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<string>(`${this.basePath}/customer/${encodeURIComponent(String(contractId))}/properties`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param partyId 
     * @param addressId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAddressForContract(contractId: string, partyId: string, addressId: string, observe?: 'body', reportProgress?: boolean): Observable<Address>;
    public deleteAddressForContract(contractId: string, partyId: string, addressId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Address>>;
    public deleteAddressForContract(contractId: string, partyId: string, addressId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Address>>;
    public deleteAddressForContract(contractId: string, partyId: string, addressId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling deleteAddressForContract.');
        }
        if (partyId === null || partyId === undefined) {
            throw new Error('Required parameter partyId was null or undefined when calling deleteAddressForContract.');
        }
        if (addressId === null || addressId === undefined) {
            throw new Error('Required parameter addressId was null or undefined when calling deleteAddressForContract.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<Address>(`${this.basePath}/customer/contracts/${encodeURIComponent(String(contractId))}/parties/${encodeURIComponent(String(partyId))}/deleteaddress/${encodeURIComponent(String(addressId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param partyId 
     * @param contactChannelId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteContactChannel(contractId: string, partyId: string, contactChannelId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteContactChannel(contractId: string, partyId: string, contactChannelId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteContactChannel(contractId: string, partyId: string, contactChannelId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteContactChannel(contractId: string, partyId: string, contactChannelId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling deleteContactChannel.');
        }
        if (partyId === null || partyId === undefined) {
            throw new Error('Required parameter partyId was null or undefined when calling deleteContactChannel.');
        }
        if (contactChannelId === null || contactChannelId === undefined) {
            throw new Error('Required parameter contactChannelId was null or undefined when calling deleteContactChannel.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/customer/contracts/${encodeURIComponent(String(contractId))}/parties/${encodeURIComponent(String(partyId))}/contactchannels/${encodeURIComponent(String(contactChannelId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param partyId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteParty(contractId: string, partyId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteParty(contractId: string, partyId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteParty(contractId: string, partyId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteParty(contractId: string, partyId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling deleteParty.');
        }
        if (partyId === null || partyId === undefined) {
            throw new Error('Required parameter partyId was null or undefined when calling deleteParty.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/customer/${encodeURIComponent(String(contractId))}/deleteParty/${encodeURIComponent(String(partyId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param propertyId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteProperty(contractId: string, propertyId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteProperty(contractId: string, propertyId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteProperty(contractId: string, propertyId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteProperty(contractId: string, propertyId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling deleteProperty.');
        }
        if (propertyId === null || propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling deleteProperty.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/customer/${encodeURIComponent(String(contractId))}/deleteproperty/${encodeURIComponent(String(propertyId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param partyId 
     * @param partyRoleId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteRole(contractId: string, partyId: string, partyRoleId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteRole(contractId: string, partyId: string, partyRoleId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteRole(contractId: string, partyId: string, partyRoleId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteRole(contractId: string, partyId: string, partyRoleId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling deleteRole.');
        }
        if (partyId === null || partyId === undefined) {
            throw new Error('Required parameter partyId was null or undefined when calling deleteRole.');
        }
        if (partyRoleId === null || partyRoleId === undefined) {
            throw new Error('Required parameter partyRoleId was null or undefined when calling deleteRole.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/customer/${encodeURIComponent(String(contractId))}/parties/${encodeURIComponent(String(partyId))}/partyroles/${encodeURIComponent(String(partyRoleId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param partyId 
     * @param addressId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAddressForContract(contractId: string, partyId: string, addressId: string, observe?: 'body', reportProgress?: boolean): Observable<Address>;
    public getAddressForContract(contractId: string, partyId: string, addressId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Address>>;
    public getAddressForContract(contractId: string, partyId: string, addressId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Address>>;
    public getAddressForContract(contractId: string, partyId: string, addressId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling getAddressForContract.');
        }
        if (partyId === null || partyId === undefined) {
            throw new Error('Required parameter partyId was null or undefined when calling getAddressForContract.');
        }
        if (addressId === null || addressId === undefined) {
            throw new Error('Required parameter addressId was null or undefined when calling getAddressForContract.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Address>(`${this.basePath}/customer/contracts/${encodeURIComponent(String(contractId))}/parties/${encodeURIComponent(String(partyId))}/addresses/${encodeURIComponent(String(addressId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param partyId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAddressesForContract(contractId: string, partyId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<any>>;
    public getAddressesForContract(contractId: string, partyId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<any>>>;
    public getAddressesForContract(contractId: string, partyId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<any>>>;
    public getAddressesForContract(contractId: string, partyId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling getAddressesForContract.');
        }
        if (partyId === null || partyId === undefined) {
            throw new Error('Required parameter partyId was null or undefined when calling getAddressesForContract.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<any>>(`${this.basePath}/customer/contracts/${encodeURIComponent(String(contractId))}/parties/${encodeURIComponent(String(partyId))}/addresses`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllPartiesForContract(body?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<any>>;
    public getAllPartiesForContract(body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<any>>>;
    public getAllPartiesForContract(body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<any>>>;
    public getAllPartiesForContract(body?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.get<Array<any>>(`${this.basePath}/customer/allparties`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllPropertiesForContract(body?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<any>>;
    public getAllPropertiesForContract(body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<any>>>;
    public getAllPropertiesForContract(body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<any>>>;
    public getAllPropertiesForContract(body?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.get<Array<any>>(`${this.basePath}/customer/allproperties`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param partyId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllRoleListForContractIdAndPartyId(contractId: string, partyId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<any>>;
    public getAllRoleListForContractIdAndPartyId(contractId: string, partyId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<any>>>;
    public getAllRoleListForContractIdAndPartyId(contractId: string, partyId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<any>>>;
    public getAllRoleListForContractIdAndPartyId(contractId: string, partyId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling getAllRoleListForContractIdAndPartyId.');
        }
        if (partyId === null || partyId === undefined) {
            throw new Error('Required parameter partyId was null or undefined when calling getAllRoleListForContractIdAndPartyId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<any>>(`${this.basePath}/customer/${encodeURIComponent(String(contractId))}/parties/${encodeURIComponent(String(partyId))}/partyroles`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param partyId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getContactChannels(contractId: string, partyId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<any>>;
    public getContactChannels(contractId: string, partyId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<any>>>;
    public getContactChannels(contractId: string, partyId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<any>>>;
    public getContactChannels(contractId: string, partyId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling getContactChannels.');
        }
        if (partyId === null || partyId === undefined) {
            throw new Error('Required parameter partyId was null or undefined when calling getContactChannels.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<any>>(`${this.basePath}/customer/contracts/${encodeURIComponent(String(contractId))}/parties/${encodeURIComponent(String(partyId))}/contactchannels`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param propertyId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProperty(contractId: string, propertyId: string, observe?: 'body', reportProgress?: boolean): Observable<Property>;
    public getProperty(contractId: string, propertyId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Property>>;
    public getProperty(contractId: string, propertyId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Property>>;
    public getProperty(contractId: string, propertyId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling getProperty.');
        }
        if (propertyId === null || propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling getProperty.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Property>(`${this.basePath}/customer/${encodeURIComponent(String(contractId))}/property/${encodeURIComponent(String(propertyId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param partyId 
     * @param partyRoleId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRoleDataForContractIdAndPartyId(contractId: string, partyId: string, partyRoleId: string, observe?: 'body', reportProgress?: boolean): Observable<PartyRole>;
    public getRoleDataForContractIdAndPartyId(contractId: string, partyId: string, partyRoleId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PartyRole>>;
    public getRoleDataForContractIdAndPartyId(contractId: string, partyId: string, partyRoleId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PartyRole>>;
    public getRoleDataForContractIdAndPartyId(contractId: string, partyId: string, partyRoleId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling getRoleDataForContractIdAndPartyId.');
        }
        if (partyId === null || partyId === undefined) {
            throw new Error('Required parameter partyId was null or undefined when calling getRoleDataForContractIdAndPartyId.');
        }
        if (partyRoleId === null || partyRoleId === undefined) {
            throw new Error('Required parameter partyRoleId was null or undefined when calling getRoleDataForContractIdAndPartyId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<PartyRole>(`${this.basePath}/customer/${encodeURIComponent(String(contractId))}/parties/${encodeURIComponent(String(partyId))}/partyroles/${encodeURIComponent(String(partyRoleId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getServiceProvider(contractId: string, observe?: 'body', reportProgress?: boolean): Observable<ServiceProvider>;
    public getServiceProvider(contractId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ServiceProvider>>;
    public getServiceProvider(contractId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ServiceProvider>>;
    public getServiceProvider(contractId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling getServiceProvider.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ServiceProvider>(`${this.basePath}/customer/contracts/${encodeURIComponent(String(contractId))}/serviceprovider/carinspection`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param partyId 
     * @param contactChannelId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSpecificContactChannel(contractId: string, partyId: string, contactChannelId: string, observe?: 'body', reportProgress?: boolean): Observable<ContactChannel>;
    public getSpecificContactChannel(contractId: string, partyId: string, contactChannelId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ContactChannel>>;
    public getSpecificContactChannel(contractId: string, partyId: string, contactChannelId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ContactChannel>>;
    public getSpecificContactChannel(contractId: string, partyId: string, contactChannelId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling getSpecificContactChannel.');
        }
        if (partyId === null || partyId === undefined) {
            throw new Error('Required parameter partyId was null or undefined when calling getSpecificContactChannel.');
        }
        if (contactChannelId === null || contactChannelId === undefined) {
            throw new Error('Required parameter contactChannelId was null or undefined when calling getSpecificContactChannel.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<ContactChannel>(`${this.basePath}/customer/contracts/${encodeURIComponent(String(contractId))}/parties/${encodeURIComponent(String(partyId))}/contactchannels/${encodeURIComponent(String(contactChannelId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param partyId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public partyData(contractId: string, partyId: string, observe?: 'body', reportProgress?: boolean): Observable<Party>;
    public partyData(contractId: string, partyId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Party>>;
    public partyData(contractId: string, partyId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Party>>;
    public partyData(contractId: string, partyId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling partyData.');
        }
        if (partyId === null || partyId === undefined) {
            throw new Error('Required parameter partyId was null or undefined when calling partyData.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Party>(`${this.basePath}/customer/${encodeURIComponent(String(contractId))}/partyData/${encodeURIComponent(String(partyId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postAddressForContract(contractId: string, body?: Array<AddressModel>, observe?: 'body', reportProgress?: boolean): Observable<Array<any>>;
    public postAddressForContract(contractId: string, body?: Array<AddressModel>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<any>>>;
    public postAddressForContract(contractId: string, body?: Array<AddressModel>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<any>>>;
    public postAddressForContract(contractId: string, body?: Array<AddressModel>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling postAddressForContract.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Array<any>>(`${this.basePath}/customer/contracts/${encodeURIComponent(String(contractId))}/parties/sendaddress`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postContactChannel(contractId: string, body?: Array<ContactChannel>, observe?: 'body', reportProgress?: boolean): Observable<Array<any>>;
    public postContactChannel(contractId: string, body?: Array<ContactChannel>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<any>>>;
    public postContactChannel(contractId: string, body?: Array<ContactChannel>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<any>>>;
    public postContactChannel(contractId: string, body?: Array<ContactChannel>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling postContactChannel.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Array<any>>(`${this.basePath}/customer/contracts/${encodeURIComponent(String(contractId))}/parties/contactchannels`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param partyId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postContractRolesOfTheParty(contractId: string, partyId: string, body?: PartyData, observe?: 'body', reportProgress?: boolean): Observable<PartyRole>;
    public postContractRolesOfTheParty(contractId: string, partyId: string, body?: PartyData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PartyRole>>;
    public postContractRolesOfTheParty(contractId: string, partyId: string, body?: PartyData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PartyRole>>;
    public postContractRolesOfTheParty(contractId: string, partyId: string, body?: PartyData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling postContractRolesOfTheParty.');
        }
        if (partyId === null || partyId === undefined) {
            throw new Error('Required parameter partyId was null or undefined when calling postContractRolesOfTheParty.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<PartyRole>(`${this.basePath}/customer/${encodeURIComponent(String(contractId))}/parties/${encodeURIComponent(String(partyId))}/partyroles`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postParty(contractId: string, body?: PartyData, observe?: 'body', reportProgress?: boolean): Observable<CarOwner>;
    public postParty(contractId: string, body?: PartyData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CarOwner>>;
    public postParty(contractId: string, body?: PartyData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CarOwner>>;
    public postParty(contractId: string, body?: PartyData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling postParty.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<CarOwner>(`${this.basePath}/customer/${encodeURIComponent(String(contractId))}/party`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putAddressForContract(contractId: string, body?: Array<AddressModel>, observe?: 'body', reportProgress?: boolean): Observable<Array<any>>;
    public putAddressForContract(contractId: string, body?: Array<AddressModel>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<any>>>;
    public putAddressForContract(contractId: string, body?: Array<AddressModel>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<any>>>;
    public putAddressForContract(contractId: string, body?: Array<AddressModel>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling putAddressForContract.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<Array<any>>(`${this.basePath}/customer/contracts/${encodeURIComponent(String(contractId))}/parties/updateaddress`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param propertyId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putDriverDetails(contractId: string, propertyId: string, body?: Driver, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public putDriverDetails(contractId: string, propertyId: string, body?: Driver, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public putDriverDetails(contractId: string, propertyId: string, body?: Driver, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public putDriverDetails(contractId: string, propertyId: string, body?: Driver, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling putDriverDetails.');
        }
        if (propertyId === null || propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling putDriverDetails.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/customer/contracts/${encodeURIComponent(String(contractId))}/${encodeURIComponent(String(propertyId))}/driverdetails`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateContactChannel(contractId: string, body?: Array<ContactChannel>, observe?: 'body', reportProgress?: boolean): Observable<Array<any>>;
    public updateContactChannel(contractId: string, body?: Array<ContactChannel>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<any>>>;
    public updateContactChannel(contractId: string, body?: Array<ContactChannel>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<any>>>;
    public updateContactChannel(contractId: string, body?: Array<ContactChannel>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling updateContactChannel.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<Array<any>>(`${this.basePath}/customer/contracts/${encodeURIComponent(String(contractId))}/parties/updatecontactchannels`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param partyId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateParty(contractId: string, partyId: string, body?: PartyData, observe?: 'body', reportProgress?: boolean): Observable<Party>;
    public updateParty(contractId: string, partyId: string, body?: PartyData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Party>>;
    public updateParty(contractId: string, partyId: string, body?: PartyData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Party>>;
    public updateParty(contractId: string, partyId: string, body?: PartyData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling updateParty.');
        }
        if (partyId === null || partyId === undefined) {
            throw new Error('Required parameter partyId was null or undefined when calling updateParty.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<Party>(`${this.basePath}/customer/${encodeURIComponent(String(contractId))}/updateparty/${encodeURIComponent(String(partyId))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param propertyId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProperty(contractId: string, propertyId: string, body?: VehicleProperty, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateProperty(contractId: string, propertyId: string, body?: VehicleProperty, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateProperty(contractId: string, propertyId: string, body?: VehicleProperty, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateProperty(contractId: string, propertyId: string, body?: VehicleProperty, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling updateProperty.');
        }
        if (propertyId === null || propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling updateProperty.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/customer/${encodeURIComponent(String(contractId))}/updateproperty/${encodeURIComponent(String(propertyId))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * tbd...
     * 
     * @param contractId 
     * @param partyId 
     * @param partyRoleId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateRoleData(contractId: string, partyId: string, partyRoleId: string, body?: PartyData, observe?: 'body', reportProgress?: boolean): Observable<PartyRole>;
    public updateRoleData(contractId: string, partyId: string, partyRoleId: string, body?: PartyData, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PartyRole>>;
    public updateRoleData(contractId: string, partyId: string, partyRoleId: string, body?: PartyData, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PartyRole>>;
    public updateRoleData(contractId: string, partyId: string, partyRoleId: string, body?: PartyData, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling updateRoleData.');
        }
        if (partyId === null || partyId === undefined) {
            throw new Error('Required parameter partyId was null or undefined when calling updateRoleData.');
        }
        if (partyRoleId === null || partyRoleId === undefined) {
            throw new Error('Required parameter partyRoleId was null or undefined when calling updateRoleData.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<PartyRole>(`${this.basePath}/customer/${encodeURIComponent(String(contractId))}/parties/${encodeURIComponent(String(partyId))}/partyroles/${encodeURIComponent(String(partyRoleId))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
